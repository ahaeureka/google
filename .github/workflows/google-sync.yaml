name: Sync Google Dependencies

on:
  schedule:
    - cron: "0 2 * * *"   # 每天凌晨 2 点 UTC
  workflow_dispatch:
    inputs:
      protobuf_ref:
        description: "protobuf branch or tag"
        required: false
        default: "main"
      googleapis_ref:
        description: "googleapis branch or tag"
        required: false
        default: "master"

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync protobuf & googleapis (.proto only)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 清理旧文件
          rm -rf protobuf/*.proto api/*.proto

          # -------- 拉取 protobuf --------
          PROTO_REF="${{ github.event.inputs.protobuf_ref || 'main' }}"
          git clone --depth 1 --branch "$PROTO_REF" --filter=blob:none https://github.com/protocolbuffers/protobuf.git tmp-protobuf
          cd tmp-protobuf
          git sparse-checkout init --cone
          git sparse-checkout set src/google
          PROTO_HASH=$(git rev-parse --short HEAD)
          cd ..
          mkdir -p protobuf
          # 只同步 .proto 文件，保留相对路径
          find tmp-protobuf/src/google -name "*.proto" -type f -exec rsync -R {} protobuf/ \;
          rm -rf tmp-protobuf

          # -------- 拉取 googleapis --------
          GA_REF="${{ github.event.inputs.googleapis_ref || 'master' }}"
          git clone --depth 1 --branch "$GA_REF" --filter=blob:none https://github.com/googleapis/googleapis.git tmp-googleapis
          cd tmp-googleapis
          git sparse-checkout init --cone
          git sparse-checkout set google/api
          GA_HASH=$(git rev-parse --short HEAD)
          cd ..
          mkdir -p api
          find tmp-googleapis/google/api -name "*.proto" -type f -exec rsync -R {} api/ \;
          rm -rf tmp-googleapis

          # 冲突检测（按文件名，不考虑目录）
          CONFLICTS=$(comm -12 \
            <(find api -name "*.proto" -type f | xargs -n1 basename | sort) \
            <(find protobuf -name "*.proto" -type f | xargs -n1 basename | sort))
          if [ -n "$CONFLICTS" ]; then
            echo "❌ Conflict detected! The following .proto files exist in both protobuf and api:"
            echo "$CONFLICTS"
            exit 1
          fi

          # 提交更新
          git add protobuf/*.proto api/*.proto
          if git diff --cached --quiet; then
            echo "✅ No changes, nothing to commit."
          else
            git commit -m "chore: sync google dependencies\n\nprotobuf: $PROTO_REF @ $PROTO_HASH\ngoogleapis: $GA_REF @ $GA_HASH"
            git push
          fi

